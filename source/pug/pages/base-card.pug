extends ../components/base/layout

block variables
  -
    const
          title = "base-card",
          wrapperMods = "",
          hasHeader = false,
          headerMods = "",
          hasPageNav = true,
          pageNavMods = "",
          hasFooter = false,
          footerMods = "",
          currentUrl = "base-card.html"

  -
    const params = {
      component: {
        mixin: "base-card",
        name: "Base-card",
        localName: "Базовая карточка",
        git: "https://github.com/shumova/party-kit/tree/master/source/components/cards/base-card"
      },
      description: [
        "Состоит из компонента Card и опциональных изображения и компонентов Title, Text, Btn, Icon-btn",
        "Для названия компонента карточки используйте шаблон {name}-card, например: product-card, service-card",
        "Внешний вид контейнера карточки настраивается модификаторами компонента \<a class=\"link\" href=\"../card.html\">Card\<\/a>, которые можно как передавать в компонент, так и фиксировать локально. При использовании обоих вариантов передачи модификторов, они комбинируются. Если необходима перезапись локальных модификаторов передаваемыми, скорректируйте \<span style=\"padding-top: 5px; display: block\">modifiers: [\"elevated-shadow-1\", \"filled\", \"form-round-xl\", ...(card?.modifiers ?? [])]\<\span> \<span style=\"padding-top: 5px; display: block\">на \<span>\<span style=\"padding-top: 5px; display: block\">modifiers: [...(card?.modifiers ?? []) || ...[\"elevated-shadow-1\", \"filled\", \"form-round-xl\"]]\<\span>",
        "Радиус закругления углов изображения наследуется через css-переменную --card-border-raius контейнера карточки Card",
        "Размер карточки зависит от расстояния между элементами и внутренних отступов карточки. Если по макету карточке требуется задать внешнюю геометрию (высоту, ширину, внешние отступы), используйте для этого родительский класс .parent__base-card или .parent .base-card",
        "Пропорции изображения задаются через переменные --img-width и --img-height (соотношение сторон)",
        "Для изображения предусмотрена заглушка imgPlaceholder, убирайте когда не нужна"
      ],
      base: [
    `mixin base-card(props = {})
      -
        const
              {card, img, title, subtitle, text, iconBtn, btn} = props,
              modifiers = props.modifiers ? props.modifiers.map((mod) => "base-card--" + mod) : [];

      -
        const
              _params = {
                card: {
                  modifiers: ["elevated-shadow-1", "filled", "form-round-xl", ...(card?.modifiers ?? [])]
                },
                imgPlaceholder: {
                  path: "content",
                  name: "placeholder",
                  format: "png",
                  width: img.width || "480",
                  height: img.height || "480"
                },
                img: img && {
                  path: img.path || "",
                  name: img.name || "",
                  format: img.format || "jpg",
                  width: img.width || "700",
                  height: img.height || "400",
                  altText: img.altText || ""
                },
                title: title && {
                  text: title.text,
                  modifiers: ["size-2xl", ...(title.modifiers ?? [])]
                },
                subtitle: subtitle && {
                  text: subtitle.text,
                  modifiers: ["size-l", ...(subtitle.modifiers ?? [])]
                },
                text: text && {
                  tag: text.tag || "p",
                  content: text.content,
                  modifiers: [...(text.modifiers ?? [])]
                },
                iconBtn: iconBtn && {
                  href: iconBtn.href,
                  ariaLabel: \`Open \${title.text} component in git\`,
                  icon: {
                    name: "git",
                    width: 32,
                    height: 32,
                  },
                  modifiers: ["form-round", "elevated-shadow-1"]
                },
                btn: btn && {
                  href: btn.href,
                  text: btn.text || "Open",
                  modifiers: ["view-primary", "form-round-s", "size-m", "elevated-shadow-1"]
                }
              };


      +card(_params.card)(class=["base-card", ...modifiers])&attributes(attributes)
        if img
          .base-card__img
            +picture(_params.img || _params.imgPlaceholder)
        if (title || subtitle || text || btn)
          .base-card__content
            if title
              +title(_params.title).base-card__title
            if subtitle
              +title(_params.subtitle).base-card__subtitle
            if text
              +text(_params.text)
            if iconBtn
              +icon-btn(_params.iconBtn)
            if btn
              +btn(_params.btn)`,
    `.base-card {
      display: grid;
      grid-template-rows: auto 1fr;

      &__img {
        --img-width: 2;
        --img-height: 1;

        @include aspect-ratio;

        border-radius: var(--card-border-radius, 0);
        overflow: hidden;
      }

      &__content {
        display: grid;
        grid-template-columns: minmax(0, 1fr) auto;
        grid-template-rows: auto auto auto 1fr;
        grid-template-areas:
          "title icon-btn"
          "subtitle icon-btn"
          "text icon-btn"
          "btn btn";
        padding: $space-l;
      }

      .title {
        margin-bottom: $space-xs;

        &:last-child {
          margin-bottom: 0;
        }
      }

      &__title {
        grid-area: title;
      }

      &__subtitle {
        grid-area: subtitle;
      }

      .text {
        grid-area: text;
        margin-bottom: $space-m;

        &:last-child {
          margin-bottom: 0;
        }
      }

      .icon-btn {
        grid-area: icon-btn;
        align-self: start;
        margin-bottom: $space-m;
        margin-left: $space-s;

        &:last-child {
          margin-bottom: 0;
        }
      }

      .btn {
        grid-area: btn;
        align-self: end;
      }
    }`
      ],
      examples: {
        snippets: [
          {
            title: {
              text: "Базовый компонент со&nbsp;всеми предусмотренными элементами"
            },
            props: {
              img: {
                path: "content",
                name: "placeholder",
                format: "png",
                altText: "Alt"
              },
              title: {
                text: "Title"
              },
              subtitle: {
                text: "Subtitle"
              },
              text: {
                content: ["Text"]
              },
              iconBtn: {
                href: "#"
              },
              btn: {
                href: "#",
                text: "Button"
              }
            },
            code:
      `+base-card({
        img: {
          path: "content",
          name: "placeholder",
          format: "png",
          altText: "Alt"
        },
        title: {
          text: "Title"
        },
        subtitle: {
          text: "Subtitle"
        },
        text: {
          content: ["Text"]
        },
        iconBtn: {
          href: "#"
        },
        btn: {
          href: "#",
          text: "Button"
        }
      })`
          },
          {
            title: {
              text: "Базовый компонент только с&nbsp;изображением, заголовком и текстом"
            },
            props: {
              img: {
                path: "content",
                name: "placeholder",
                format: "png",
                altText: "Alt"
              },
              title: {
                text: "Title"
              },
              text: {
                content: ["Text"]
              },
              link: {
                href: "#",
                text: "Button"
              }
            },
            code:
      `+base-card({
          img: {
            path: "content",
            name: "placeholder",
            format: "png",
            altText: "Alt"
          },
          title: {
            text: "Title"
          },
          text: {
            content: ["Text"]
          },
          btn: {
            href: "#",
            text: "Button"
          }
        })`
          }
        ]
      }
    }

block page
  +component(params)

block modals
